import cv2
import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.utils import shuffle

def recreate_image(centers, labels, rows, cols):
    d = centers.shape[1]
    image_clusters = np.zeros((rows, cols, d))
    label_idx = 0
    for i in range(rows):
        for j in range(cols):
            image_clusters[i][j] = centers[labels[label_idx]]
            label_idx += 1
    return image_clusters

class Bandera:

    def __init__(self):

        n_bandera = input("Inserte el nombre de la bandera")
        self.imagen = cv2.imread(n_bandera)
        cv2.imshow("Bandera", self.imagen)
        self.imagen = cv2.cvtColor(self.imagen, cv2.COLOR_BGR2RGB) #se convierte la imagen a RGB
        self.imagen = np.array(self.imagen, dtype=np.float64) / 255
        cv2.waitKey(0) #Dejar la imagen en pantalla hasta que se presione cualquier cosa



    def Colores(self)

           for n_cl in range(4):
        print("Se est√° haciendo clustering para :", n_cl + 1, 'cluster(s)' )
        n_colors = n_cl + 1  # Se colocan los valores de centro de color

        rows, cols, ch = self.imagen.shape
        assert ch == 3
        image_array = np.reshape(self.imagen, (rows * cols, ch))

        model = KMeans(n_clusters=n_colors, random_state=0).fit(image_array_sample)
        labels = model.predict(image_array)
        centers = model.cluster_centers_
        self.labels = labels
        
        for labels in range(4):
            if 0 in labels 
                colores = 1
                if 1 in labels:
                    colores = colores + 1
                if 2 in labels:
                    colores = colores + 1
                if 3 in labels:
                    colores = colores + 1
        print("La bandera tiene", colores, "colores")

    def Porcentaje(self):

    def Orientacion(self):
banderas = Bandera()
